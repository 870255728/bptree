// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bptree_node.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bptree_5fnode_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bptree_5fnode_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bptree_5fnode_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bptree_5fnode_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bptree_5fnode_2eproto;
namespace bptree {
class BPTreeNode;
struct BPTreeNodeDefaultTypeInternal;
extern BPTreeNodeDefaultTypeInternal _BPTreeNode_default_instance_;
}  // namespace bptree
PROTOBUF_NAMESPACE_OPEN
template<> ::bptree::BPTreeNode* Arena::CreateMaybeMessage<::bptree::BPTreeNode>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bptree {

enum NodeType : int {
  NODE_TYPE_UNKNOWN = 0,
  NODE_TYPE_INTERNAL = 1,
  NODE_TYPE_LEAF = 2,
  NodeType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NodeType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NodeType_IsValid(int value);
constexpr NodeType NodeType_MIN = NODE_TYPE_UNKNOWN;
constexpr NodeType NodeType_MAX = NODE_TYPE_LEAF;
constexpr int NodeType_ARRAYSIZE = NodeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NodeType_descriptor();
template<typename T>
inline const std::string& NodeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NodeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NodeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NodeType_descriptor(), enum_t_value);
}
inline bool NodeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NodeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NodeType>(
    NodeType_descriptor(), name, value);
}
// ===================================================================

class BPTreeNode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bptree.BPTreeNode) */ {
 public:
  inline BPTreeNode() : BPTreeNode(nullptr) {}
  ~BPTreeNode() override;
  explicit PROTOBUF_CONSTEXPR BPTreeNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BPTreeNode(const BPTreeNode& from);
  BPTreeNode(BPTreeNode&& from) noexcept
    : BPTreeNode() {
    *this = ::std::move(from);
  }

  inline BPTreeNode& operator=(const BPTreeNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline BPTreeNode& operator=(BPTreeNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BPTreeNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const BPTreeNode* internal_default_instance() {
    return reinterpret_cast<const BPTreeNode*>(
               &_BPTreeNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BPTreeNode& a, BPTreeNode& b) {
    a.Swap(&b);
  }
  inline void Swap(BPTreeNode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BPTreeNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BPTreeNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BPTreeNode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BPTreeNode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BPTreeNode& from) {
    BPTreeNode::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BPTreeNode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bptree.BPTreeNode";
  }
  protected:
  explicit BPTreeNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 5,
    kChildrenPageIdsFieldNumber = 6,
    kValuesFieldNumber = 7,
    kNodeTypeFieldNumber = 1,
    kPageIdFieldNumber = 2,
    kParentPageIdFieldNumber = 3,
    kKeyCountFieldNumber = 4,
    kNextSiblingIdFieldNumber = 8,
  };
  // repeated int64 key = 5;
  int key_size() const;
  private:
  int _internal_key_size() const;
  public:
  void clear_key();
  private:
  int64_t _internal_key(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_key() const;
  void _internal_add_key(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_key();
  public:
  int64_t key(int index) const;
  void set_key(int index, int64_t value);
  void add_key(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      key() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_key();

  // repeated int32 children_page_ids = 6;
  int children_page_ids_size() const;
  private:
  int _internal_children_page_ids_size() const;
  public:
  void clear_children_page_ids();
  private:
  int32_t _internal_children_page_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_children_page_ids() const;
  void _internal_add_children_page_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_children_page_ids();
  public:
  int32_t children_page_ids(int index) const;
  void set_children_page_ids(int index, int32_t value);
  void add_children_page_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      children_page_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_children_page_ids();

  // repeated int64 values = 7;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  int64_t _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_values() const;
  void _internal_add_values(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_values();
  public:
  int64_t values(int index) const;
  void set_values(int index, int64_t value);
  void add_values(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_values();

  // .bptree.NodeType node_type = 1;
  void clear_node_type();
  ::bptree::NodeType node_type() const;
  void set_node_type(::bptree::NodeType value);
  private:
  ::bptree::NodeType _internal_node_type() const;
  void _internal_set_node_type(::bptree::NodeType value);
  public:

  // int32 page_id = 2;
  void clear_page_id();
  int32_t page_id() const;
  void set_page_id(int32_t value);
  private:
  int32_t _internal_page_id() const;
  void _internal_set_page_id(int32_t value);
  public:

  // int32 parent_page_id = 3;
  void clear_parent_page_id();
  int32_t parent_page_id() const;
  void set_parent_page_id(int32_t value);
  private:
  int32_t _internal_parent_page_id() const;
  void _internal_set_parent_page_id(int32_t value);
  public:

  // int32 key_count = 4;
  void clear_key_count();
  int32_t key_count() const;
  void set_key_count(int32_t value);
  private:
  int32_t _internal_key_count() const;
  void _internal_set_key_count(int32_t value);
  public:

  // int32 next_sibling_id = 8;
  void clear_next_sibling_id();
  int32_t next_sibling_id() const;
  void set_next_sibling_id(int32_t value);
  private:
  int32_t _internal_next_sibling_id() const;
  void _internal_set_next_sibling_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bptree.BPTreeNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > key_;
    mutable std::atomic<int> _key_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > children_page_ids_;
    mutable std::atomic<int> _children_page_ids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > values_;
    mutable std::atomic<int> _values_cached_byte_size_;
    int node_type_;
    int32_t page_id_;
    int32_t parent_page_id_;
    int32_t key_count_;
    int32_t next_sibling_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bptree_5fnode_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BPTreeNode

// .bptree.NodeType node_type = 1;
inline void BPTreeNode::clear_node_type() {
  _impl_.node_type_ = 0;
}
inline ::bptree::NodeType BPTreeNode::_internal_node_type() const {
  return static_cast< ::bptree::NodeType >(_impl_.node_type_);
}
inline ::bptree::NodeType BPTreeNode::node_type() const {
  // @@protoc_insertion_point(field_get:bptree.BPTreeNode.node_type)
  return _internal_node_type();
}
inline void BPTreeNode::_internal_set_node_type(::bptree::NodeType value) {
  
  _impl_.node_type_ = value;
}
inline void BPTreeNode::set_node_type(::bptree::NodeType value) {
  _internal_set_node_type(value);
  // @@protoc_insertion_point(field_set:bptree.BPTreeNode.node_type)
}

// int32 page_id = 2;
inline void BPTreeNode::clear_page_id() {
  _impl_.page_id_ = 0;
}
inline int32_t BPTreeNode::_internal_page_id() const {
  return _impl_.page_id_;
}
inline int32_t BPTreeNode::page_id() const {
  // @@protoc_insertion_point(field_get:bptree.BPTreeNode.page_id)
  return _internal_page_id();
}
inline void BPTreeNode::_internal_set_page_id(int32_t value) {
  
  _impl_.page_id_ = value;
}
inline void BPTreeNode::set_page_id(int32_t value) {
  _internal_set_page_id(value);
  // @@protoc_insertion_point(field_set:bptree.BPTreeNode.page_id)
}

// int32 parent_page_id = 3;
inline void BPTreeNode::clear_parent_page_id() {
  _impl_.parent_page_id_ = 0;
}
inline int32_t BPTreeNode::_internal_parent_page_id() const {
  return _impl_.parent_page_id_;
}
inline int32_t BPTreeNode::parent_page_id() const {
  // @@protoc_insertion_point(field_get:bptree.BPTreeNode.parent_page_id)
  return _internal_parent_page_id();
}
inline void BPTreeNode::_internal_set_parent_page_id(int32_t value) {
  
  _impl_.parent_page_id_ = value;
}
inline void BPTreeNode::set_parent_page_id(int32_t value) {
  _internal_set_parent_page_id(value);
  // @@protoc_insertion_point(field_set:bptree.BPTreeNode.parent_page_id)
}

// int32 key_count = 4;
inline void BPTreeNode::clear_key_count() {
  _impl_.key_count_ = 0;
}
inline int32_t BPTreeNode::_internal_key_count() const {
  return _impl_.key_count_;
}
inline int32_t BPTreeNode::key_count() const {
  // @@protoc_insertion_point(field_get:bptree.BPTreeNode.key_count)
  return _internal_key_count();
}
inline void BPTreeNode::_internal_set_key_count(int32_t value) {
  
  _impl_.key_count_ = value;
}
inline void BPTreeNode::set_key_count(int32_t value) {
  _internal_set_key_count(value);
  // @@protoc_insertion_point(field_set:bptree.BPTreeNode.key_count)
}

// repeated int64 key = 5;
inline int BPTreeNode::_internal_key_size() const {
  return _impl_.key_.size();
}
inline int BPTreeNode::key_size() const {
  return _internal_key_size();
}
inline void BPTreeNode::clear_key() {
  _impl_.key_.Clear();
}
inline int64_t BPTreeNode::_internal_key(int index) const {
  return _impl_.key_.Get(index);
}
inline int64_t BPTreeNode::key(int index) const {
  // @@protoc_insertion_point(field_get:bptree.BPTreeNode.key)
  return _internal_key(index);
}
inline void BPTreeNode::set_key(int index, int64_t value) {
  _impl_.key_.Set(index, value);
  // @@protoc_insertion_point(field_set:bptree.BPTreeNode.key)
}
inline void BPTreeNode::_internal_add_key(int64_t value) {
  _impl_.key_.Add(value);
}
inline void BPTreeNode::add_key(int64_t value) {
  _internal_add_key(value);
  // @@protoc_insertion_point(field_add:bptree.BPTreeNode.key)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
BPTreeNode::_internal_key() const {
  return _impl_.key_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
BPTreeNode::key() const {
  // @@protoc_insertion_point(field_list:bptree.BPTreeNode.key)
  return _internal_key();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
BPTreeNode::_internal_mutable_key() {
  return &_impl_.key_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
BPTreeNode::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:bptree.BPTreeNode.key)
  return _internal_mutable_key();
}

// repeated int32 children_page_ids = 6;
inline int BPTreeNode::_internal_children_page_ids_size() const {
  return _impl_.children_page_ids_.size();
}
inline int BPTreeNode::children_page_ids_size() const {
  return _internal_children_page_ids_size();
}
inline void BPTreeNode::clear_children_page_ids() {
  _impl_.children_page_ids_.Clear();
}
inline int32_t BPTreeNode::_internal_children_page_ids(int index) const {
  return _impl_.children_page_ids_.Get(index);
}
inline int32_t BPTreeNode::children_page_ids(int index) const {
  // @@protoc_insertion_point(field_get:bptree.BPTreeNode.children_page_ids)
  return _internal_children_page_ids(index);
}
inline void BPTreeNode::set_children_page_ids(int index, int32_t value) {
  _impl_.children_page_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:bptree.BPTreeNode.children_page_ids)
}
inline void BPTreeNode::_internal_add_children_page_ids(int32_t value) {
  _impl_.children_page_ids_.Add(value);
}
inline void BPTreeNode::add_children_page_ids(int32_t value) {
  _internal_add_children_page_ids(value);
  // @@protoc_insertion_point(field_add:bptree.BPTreeNode.children_page_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
BPTreeNode::_internal_children_page_ids() const {
  return _impl_.children_page_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
BPTreeNode::children_page_ids() const {
  // @@protoc_insertion_point(field_list:bptree.BPTreeNode.children_page_ids)
  return _internal_children_page_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
BPTreeNode::_internal_mutable_children_page_ids() {
  return &_impl_.children_page_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
BPTreeNode::mutable_children_page_ids() {
  // @@protoc_insertion_point(field_mutable_list:bptree.BPTreeNode.children_page_ids)
  return _internal_mutable_children_page_ids();
}

// repeated int64 values = 7;
inline int BPTreeNode::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int BPTreeNode::values_size() const {
  return _internal_values_size();
}
inline void BPTreeNode::clear_values() {
  _impl_.values_.Clear();
}
inline int64_t BPTreeNode::_internal_values(int index) const {
  return _impl_.values_.Get(index);
}
inline int64_t BPTreeNode::values(int index) const {
  // @@protoc_insertion_point(field_get:bptree.BPTreeNode.values)
  return _internal_values(index);
}
inline void BPTreeNode::set_values(int index, int64_t value) {
  _impl_.values_.Set(index, value);
  // @@protoc_insertion_point(field_set:bptree.BPTreeNode.values)
}
inline void BPTreeNode::_internal_add_values(int64_t value) {
  _impl_.values_.Add(value);
}
inline void BPTreeNode::add_values(int64_t value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:bptree.BPTreeNode.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
BPTreeNode::_internal_values() const {
  return _impl_.values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
BPTreeNode::values() const {
  // @@protoc_insertion_point(field_list:bptree.BPTreeNode.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
BPTreeNode::_internal_mutable_values() {
  return &_impl_.values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
BPTreeNode::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:bptree.BPTreeNode.values)
  return _internal_mutable_values();
}

// int32 next_sibling_id = 8;
inline void BPTreeNode::clear_next_sibling_id() {
  _impl_.next_sibling_id_ = 0;
}
inline int32_t BPTreeNode::_internal_next_sibling_id() const {
  return _impl_.next_sibling_id_;
}
inline int32_t BPTreeNode::next_sibling_id() const {
  // @@protoc_insertion_point(field_get:bptree.BPTreeNode.next_sibling_id)
  return _internal_next_sibling_id();
}
inline void BPTreeNode::_internal_set_next_sibling_id(int32_t value) {
  
  _impl_.next_sibling_id_ = value;
}
inline void BPTreeNode::set_next_sibling_id(int32_t value) {
  _internal_set_next_sibling_id(value);
  // @@protoc_insertion_point(field_set:bptree.BPTreeNode.next_sibling_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace bptree

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bptree::NodeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bptree::NodeType>() {
  return ::bptree::NodeType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bptree_5fnode_2eproto
