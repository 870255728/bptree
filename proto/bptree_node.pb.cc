// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bptree_node.proto

#include "bptree_node.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace bptree {
PROTOBUF_CONSTEXPR BPTreeNode::BPTreeNode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{}
  , /*decltype(_impl_._key_cached_byte_size_)*/{0}
  , /*decltype(_impl_.children_page_ids_)*/{}
  , /*decltype(_impl_._children_page_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_._values_cached_byte_size_)*/{0}
  , /*decltype(_impl_.node_type_)*/0
  , /*decltype(_impl_.page_id_)*/0
  , /*decltype(_impl_.parent_page_id_)*/0
  , /*decltype(_impl_.key_count_)*/0
  , /*decltype(_impl_.next_sibling_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BPTreeNodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BPTreeNodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BPTreeNodeDefaultTypeInternal() {}
  union {
    BPTreeNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BPTreeNodeDefaultTypeInternal _BPTreeNode_default_instance_;
}  // namespace bptree
static ::_pb::Metadata file_level_metadata_bptree_5fnode_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_bptree_5fnode_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_bptree_5fnode_2eproto = nullptr;

const uint32_t TableStruct_bptree_5fnode_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bptree::BPTreeNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bptree::BPTreeNode, _impl_.node_type_),
  PROTOBUF_FIELD_OFFSET(::bptree::BPTreeNode, _impl_.page_id_),
  PROTOBUF_FIELD_OFFSET(::bptree::BPTreeNode, _impl_.parent_page_id_),
  PROTOBUF_FIELD_OFFSET(::bptree::BPTreeNode, _impl_.key_count_),
  PROTOBUF_FIELD_OFFSET(::bptree::BPTreeNode, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::bptree::BPTreeNode, _impl_.children_page_ids_),
  PROTOBUF_FIELD_OFFSET(::bptree::BPTreeNode, _impl_.values_),
  PROTOBUF_FIELD_OFFSET(::bptree::BPTreeNode, _impl_.next_sibling_id_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::bptree::BPTreeNode)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::bptree::_BPTreeNode_default_instance_._instance,
};

const char descriptor_table_protodef_bptree_5fnode_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021bptree_node.proto\022\006bptree\"\276\001\n\nBPTreeNo"
  "de\022#\n\tnode_type\030\001 \001(\0162\020.bptree.NodeType\022"
  "\017\n\007page_id\030\002 \001(\005\022\026\n\016parent_page_id\030\003 \001(\005"
  "\022\021\n\tkey_count\030\004 \001(\005\022\013\n\003key\030\005 \003(\003\022\031\n\021chil"
  "dren_page_ids\030\006 \003(\005\022\016\n\006values\030\007 \003(\003\022\027\n\017n"
  "ext_sibling_id\030\010 \001(\005*M\n\010NodeType\022\025\n\021NODE"
  "_TYPE_UNKNOWN\020\000\022\026\n\022NODE_TYPE_INTERNAL\020\001\022"
  "\022\n\016NODE_TYPE_LEAF\020\002b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_bptree_5fnode_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_bptree_5fnode_2eproto = {
    false, false, 307, descriptor_table_protodef_bptree_5fnode_2eproto,
    "bptree_node.proto",
    &descriptor_table_bptree_5fnode_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_bptree_5fnode_2eproto::offsets,
    file_level_metadata_bptree_5fnode_2eproto, file_level_enum_descriptors_bptree_5fnode_2eproto,
    file_level_service_descriptors_bptree_5fnode_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_bptree_5fnode_2eproto_getter() {
  return &descriptor_table_bptree_5fnode_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_bptree_5fnode_2eproto(&descriptor_table_bptree_5fnode_2eproto);
namespace bptree {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NodeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bptree_5fnode_2eproto);
  return file_level_enum_descriptors_bptree_5fnode_2eproto[0];
}
bool NodeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class BPTreeNode::_Internal {
 public:
};

BPTreeNode::BPTreeNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bptree.BPTreeNode)
}
BPTreeNode::BPTreeNode(const BPTreeNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BPTreeNode* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){from._impl_.key_}
    , /*decltype(_impl_._key_cached_byte_size_)*/{0}
    , decltype(_impl_.children_page_ids_){from._impl_.children_page_ids_}
    , /*decltype(_impl_._children_page_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.values_){from._impl_.values_}
    , /*decltype(_impl_._values_cached_byte_size_)*/{0}
    , decltype(_impl_.node_type_){}
    , decltype(_impl_.page_id_){}
    , decltype(_impl_.parent_page_id_){}
    , decltype(_impl_.key_count_){}
    , decltype(_impl_.next_sibling_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.node_type_, &from._impl_.node_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.next_sibling_id_) -
    reinterpret_cast<char*>(&_impl_.node_type_)) + sizeof(_impl_.next_sibling_id_));
  // @@protoc_insertion_point(copy_constructor:bptree.BPTreeNode)
}

inline void BPTreeNode::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){arena}
    , /*decltype(_impl_._key_cached_byte_size_)*/{0}
    , decltype(_impl_.children_page_ids_){arena}
    , /*decltype(_impl_._children_page_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.values_){arena}
    , /*decltype(_impl_._values_cached_byte_size_)*/{0}
    , decltype(_impl_.node_type_){0}
    , decltype(_impl_.page_id_){0}
    , decltype(_impl_.parent_page_id_){0}
    , decltype(_impl_.key_count_){0}
    , decltype(_impl_.next_sibling_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BPTreeNode::~BPTreeNode() {
  // @@protoc_insertion_point(destructor:bptree.BPTreeNode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BPTreeNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.~RepeatedField();
  _impl_.children_page_ids_.~RepeatedField();
  _impl_.values_.~RepeatedField();
}

void BPTreeNode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BPTreeNode::Clear() {
// @@protoc_insertion_point(message_clear_start:bptree.BPTreeNode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.Clear();
  _impl_.children_page_ids_.Clear();
  _impl_.values_.Clear();
  ::memset(&_impl_.node_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.next_sibling_id_) -
      reinterpret_cast<char*>(&_impl_.node_type_)) + sizeof(_impl_.next_sibling_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BPTreeNode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bptree.NodeType node_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_node_type(static_cast<::bptree::NodeType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 page_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.page_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 parent_page_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.parent_page_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 key_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.key_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_key(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_key(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 children_page_ids = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_children_page_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_children_page_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 values = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 next_sibling_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.next_sibling_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BPTreeNode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bptree.BPTreeNode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bptree.NodeType node_type = 1;
  if (this->_internal_node_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_node_type(), target);
  }

  // int32 page_id = 2;
  if (this->_internal_page_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_page_id(), target);
  }

  // int32 parent_page_id = 3;
  if (this->_internal_parent_page_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_parent_page_id(), target);
  }

  // int32 key_count = 4;
  if (this->_internal_key_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_key_count(), target);
  }

  // repeated int64 key = 5;
  {
    int byte_size = _impl_._key_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          5, _internal_key(), byte_size, target);
    }
  }

  // repeated int32 children_page_ids = 6;
  {
    int byte_size = _impl_._children_page_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_children_page_ids(), byte_size, target);
    }
  }

  // repeated int64 values = 7;
  {
    int byte_size = _impl_._values_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          7, _internal_values(), byte_size, target);
    }
  }

  // int32 next_sibling_id = 8;
  if (this->_internal_next_sibling_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_next_sibling_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bptree.BPTreeNode)
  return target;
}

size_t BPTreeNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bptree.BPTreeNode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 key = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.key_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._key_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 children_page_ids = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.children_page_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._children_page_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 values = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.values_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .bptree.NodeType node_type = 1;
  if (this->_internal_node_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_node_type());
  }

  // int32 page_id = 2;
  if (this->_internal_page_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_page_id());
  }

  // int32 parent_page_id = 3;
  if (this->_internal_parent_page_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_parent_page_id());
  }

  // int32 key_count = 4;
  if (this->_internal_key_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_key_count());
  }

  // int32 next_sibling_id = 8;
  if (this->_internal_next_sibling_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_next_sibling_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BPTreeNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BPTreeNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BPTreeNode::GetClassData() const { return &_class_data_; }


void BPTreeNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BPTreeNode*>(&to_msg);
  auto& from = static_cast<const BPTreeNode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bptree.BPTreeNode)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.key_.MergeFrom(from._impl_.key_);
  _this->_impl_.children_page_ids_.MergeFrom(from._impl_.children_page_ids_);
  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  if (from._internal_node_type() != 0) {
    _this->_internal_set_node_type(from._internal_node_type());
  }
  if (from._internal_page_id() != 0) {
    _this->_internal_set_page_id(from._internal_page_id());
  }
  if (from._internal_parent_page_id() != 0) {
    _this->_internal_set_parent_page_id(from._internal_parent_page_id());
  }
  if (from._internal_key_count() != 0) {
    _this->_internal_set_key_count(from._internal_key_count());
  }
  if (from._internal_next_sibling_id() != 0) {
    _this->_internal_set_next_sibling_id(from._internal_next_sibling_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BPTreeNode::CopyFrom(const BPTreeNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bptree.BPTreeNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BPTreeNode::IsInitialized() const {
  return true;
}

void BPTreeNode::InternalSwap(BPTreeNode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.key_.InternalSwap(&other->_impl_.key_);
  _impl_.children_page_ids_.InternalSwap(&other->_impl_.children_page_ids_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BPTreeNode, _impl_.next_sibling_id_)
      + sizeof(BPTreeNode::_impl_.next_sibling_id_)
      - PROTOBUF_FIELD_OFFSET(BPTreeNode, _impl_.node_type_)>(
          reinterpret_cast<char*>(&_impl_.node_type_),
          reinterpret_cast<char*>(&other->_impl_.node_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BPTreeNode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bptree_5fnode_2eproto_getter, &descriptor_table_bptree_5fnode_2eproto_once,
      file_level_metadata_bptree_5fnode_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace bptree
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bptree::BPTreeNode*
Arena::CreateMaybeMessage< ::bptree::BPTreeNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bptree::BPTreeNode >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
