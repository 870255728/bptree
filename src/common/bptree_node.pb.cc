// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bptree_node.proto

#include "bptree_node.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace bptree {
PROTOBUF_CONSTEXPR HeaderProto::HeaderProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.is_leaf_)*/false
  , /*decltype(_impl_.size_)*/0
  , /*decltype(_impl_.max_size_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeaderProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeaderProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeaderProtoDefaultTypeInternal() {}
  union {
    HeaderProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeaderProtoDefaultTypeInternal _HeaderProto_default_instance_;
PROTOBUF_CONSTEXPR LeafNodeProto::LeafNodeProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.keys_)*/{}
  , /*decltype(_impl_._keys_cached_byte_size_)*/{0}
  , /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_._values_cached_byte_size_)*/{0}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.next_page_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LeafNodeProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LeafNodeProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LeafNodeProtoDefaultTypeInternal() {}
  union {
    LeafNodeProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LeafNodeProtoDefaultTypeInternal _LeafNodeProto_default_instance_;
PROTOBUF_CONSTEXPR InternalNodeProto::InternalNodeProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.keys_)*/{}
  , /*decltype(_impl_._keys_cached_byte_size_)*/{0}
  , /*decltype(_impl_.children_)*/{}
  , /*decltype(_impl_._children_cached_byte_size_)*/{0}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InternalNodeProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InternalNodeProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InternalNodeProtoDefaultTypeInternal() {}
  union {
    InternalNodeProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InternalNodeProtoDefaultTypeInternal _InternalNodeProto_default_instance_;
PROTOBUF_CONSTEXPR PagePayloadProto::PagePayloadProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PagePayloadProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PagePayloadProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PagePayloadProtoDefaultTypeInternal() {}
  union {
    PagePayloadProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PagePayloadProtoDefaultTypeInternal _PagePayloadProto_default_instance_;
}  // namespace bptree
static ::_pb::Metadata file_level_metadata_bptree_5fnode_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_bptree_5fnode_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_bptree_5fnode_2eproto = nullptr;

const uint32_t TableStruct_bptree_5fnode_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bptree::HeaderProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bptree::HeaderProto, _impl_.is_leaf_),
  PROTOBUF_FIELD_OFFSET(::bptree::HeaderProto, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::bptree::HeaderProto, _impl_.max_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bptree::LeafNodeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bptree::LeafNodeProto, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::bptree::LeafNodeProto, _impl_.keys_),
  PROTOBUF_FIELD_OFFSET(::bptree::LeafNodeProto, _impl_.values_),
  PROTOBUF_FIELD_OFFSET(::bptree::LeafNodeProto, _impl_.next_page_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bptree::InternalNodeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bptree::InternalNodeProto, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::bptree::InternalNodeProto, _impl_.keys_),
  PROTOBUF_FIELD_OFFSET(::bptree::InternalNodeProto, _impl_.children_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bptree::PagePayloadProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::bptree::PagePayloadProto, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::bptree::PagePayloadProto, _impl_.payload_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::bptree::HeaderProto)},
  { 9, -1, -1, sizeof(::bptree::LeafNodeProto)},
  { 19, -1, -1, sizeof(::bptree::InternalNodeProto)},
  { 28, -1, -1, sizeof(::bptree::PagePayloadProto)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::bptree::_HeaderProto_default_instance_._instance,
  &::bptree::_LeafNodeProto_default_instance_._instance,
  &::bptree::_InternalNodeProto_default_instance_._instance,
  &::bptree::_PagePayloadProto_default_instance_._instance,
};

const char descriptor_table_protodef_bptree_5fnode_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021bptree_node.proto\022\006bptree\">\n\013HeaderPro"
  "to\022\017\n\007is_leaf\030\001 \001(\010\022\014\n\004size\030\002 \001(\005\022\020\n\010max"
  "_size\030\003 \001(\005\"h\n\rLeafNodeProto\022#\n\006header\030\001"
  " \001(\0132\023.bptree.HeaderProto\022\014\n\004keys\030\002 \003(\005\022"
  "\016\n\006values\030\003 \003(\004\022\024\n\014next_page_id\030\004 \001(\005\"X\n"
  "\021InternalNodeProto\022#\n\006header\030\001 \001(\0132\023.bpt"
  "ree.HeaderProto\022\014\n\004keys\030\002 \003(\005\022\020\n\010childre"
  "n\030\003 \003(\005\"}\n\020PagePayloadProto\022*\n\tleaf_node"
  "\030\001 \001(\0132\025.bptree.LeafNodeProtoH\000\0222\n\rinter"
  "nal_node\030\002 \001(\0132\031.bptree.InternalNodeProt"
  "oH\000B\t\n\007payloadb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_bptree_5fnode_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_bptree_5fnode_2eproto = {
    false, false, 422, descriptor_table_protodef_bptree_5fnode_2eproto,
    "bptree_node.proto",
    &descriptor_table_bptree_5fnode_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_bptree_5fnode_2eproto::offsets,
    file_level_metadata_bptree_5fnode_2eproto, file_level_enum_descriptors_bptree_5fnode_2eproto,
    file_level_service_descriptors_bptree_5fnode_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_bptree_5fnode_2eproto_getter() {
  return &descriptor_table_bptree_5fnode_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_bptree_5fnode_2eproto(&descriptor_table_bptree_5fnode_2eproto);
namespace bptree {

// ===================================================================

class HeaderProto::_Internal {
 public:
};

HeaderProto::HeaderProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bptree.HeaderProto)
}
HeaderProto::HeaderProto(const HeaderProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeaderProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.is_leaf_){}
    , decltype(_impl_.size_){}
    , decltype(_impl_.max_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.is_leaf_, &from._impl_.is_leaf_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_size_) -
    reinterpret_cast<char*>(&_impl_.is_leaf_)) + sizeof(_impl_.max_size_));
  // @@protoc_insertion_point(copy_constructor:bptree.HeaderProto)
}

inline void HeaderProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.is_leaf_){false}
    , decltype(_impl_.size_){0}
    , decltype(_impl_.max_size_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HeaderProto::~HeaderProto() {
  // @@protoc_insertion_point(destructor:bptree.HeaderProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeaderProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HeaderProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeaderProto::Clear() {
// @@protoc_insertion_point(message_clear_start:bptree.HeaderProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.is_leaf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.max_size_) -
      reinterpret_cast<char*>(&_impl_.is_leaf_)) + sizeof(_impl_.max_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeaderProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_leaf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.is_leaf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.max_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeaderProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bptree.HeaderProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_leaf = 1;
  if (this->_internal_is_leaf() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_leaf(), target);
  }

  // int32 size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_size(), target);
  }

  // int32 max_size = 3;
  if (this->_internal_max_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_max_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bptree.HeaderProto)
  return target;
}

size_t HeaderProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bptree.HeaderProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_leaf = 1;
  if (this->_internal_is_leaf() != 0) {
    total_size += 1 + 1;
  }

  // int32 size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_size());
  }

  // int32 max_size = 3;
  if (this->_internal_max_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeaderProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeaderProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeaderProto::GetClassData() const { return &_class_data_; }


void HeaderProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeaderProto*>(&to_msg);
  auto& from = static_cast<const HeaderProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bptree.HeaderProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_is_leaf() != 0) {
    _this->_internal_set_is_leaf(from._internal_is_leaf());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  if (from._internal_max_size() != 0) {
    _this->_internal_set_max_size(from._internal_max_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeaderProto::CopyFrom(const HeaderProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bptree.HeaderProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeaderProto::IsInitialized() const {
  return true;
}

void HeaderProto::InternalSwap(HeaderProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeaderProto, _impl_.max_size_)
      + sizeof(HeaderProto::_impl_.max_size_)
      - PROTOBUF_FIELD_OFFSET(HeaderProto, _impl_.is_leaf_)>(
          reinterpret_cast<char*>(&_impl_.is_leaf_),
          reinterpret_cast<char*>(&other->_impl_.is_leaf_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeaderProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bptree_5fnode_2eproto_getter, &descriptor_table_bptree_5fnode_2eproto_once,
      file_level_metadata_bptree_5fnode_2eproto[0]);
}

// ===================================================================

class LeafNodeProto::_Internal {
 public:
  static const ::bptree::HeaderProto& header(const LeafNodeProto* msg);
};

const ::bptree::HeaderProto&
LeafNodeProto::_Internal::header(const LeafNodeProto* msg) {
  return *msg->_impl_.header_;
}
LeafNodeProto::LeafNodeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bptree.LeafNodeProto)
}
LeafNodeProto::LeafNodeProto(const LeafNodeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LeafNodeProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){from._impl_.keys_}
    , /*decltype(_impl_._keys_cached_byte_size_)*/{0}
    , decltype(_impl_.values_){from._impl_.values_}
    , /*decltype(_impl_._values_cached_byte_size_)*/{0}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.next_page_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::bptree::HeaderProto(*from._impl_.header_);
  }
  _this->_impl_.next_page_id_ = from._impl_.next_page_id_;
  // @@protoc_insertion_point(copy_constructor:bptree.LeafNodeProto)
}

inline void LeafNodeProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){arena}
    , /*decltype(_impl_._keys_cached_byte_size_)*/{0}
    , decltype(_impl_.values_){arena}
    , /*decltype(_impl_._values_cached_byte_size_)*/{0}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.next_page_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LeafNodeProto::~LeafNodeProto() {
  // @@protoc_insertion_point(destructor:bptree.LeafNodeProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LeafNodeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keys_.~RepeatedField();
  _impl_.values_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void LeafNodeProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LeafNodeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:bptree.LeafNodeProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.keys_.Clear();
  _impl_.values_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  _impl_.next_page_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeafNodeProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bptree.HeaderProto header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 keys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_keys(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_keys(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 next_page_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.next_page_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LeafNodeProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bptree.LeafNodeProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bptree.HeaderProto header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // repeated int32 keys = 2;
  {
    int byte_size = _impl_._keys_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_keys(), byte_size, target);
    }
  }

  // repeated uint64 values = 3;
  {
    int byte_size = _impl_._values_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          3, _internal_values(), byte_size, target);
    }
  }

  // int32 next_page_id = 4;
  if (this->_internal_next_page_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_next_page_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bptree.LeafNodeProto)
  return target;
}

size_t LeafNodeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bptree.LeafNodeProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 keys = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.keys_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._keys_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 values = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.values_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .bptree.HeaderProto header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // int32 next_page_id = 4;
  if (this->_internal_next_page_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_next_page_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LeafNodeProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LeafNodeProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LeafNodeProto::GetClassData() const { return &_class_data_; }


void LeafNodeProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LeafNodeProto*>(&to_msg);
  auto& from = static_cast<const LeafNodeProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bptree.LeafNodeProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.keys_.MergeFrom(from._impl_.keys_);
  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::bptree::HeaderProto::MergeFrom(
        from._internal_header());
  }
  if (from._internal_next_page_id() != 0) {
    _this->_internal_set_next_page_id(from._internal_next_page_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LeafNodeProto::CopyFrom(const LeafNodeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bptree.LeafNodeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeafNodeProto::IsInitialized() const {
  return true;
}

void LeafNodeProto::InternalSwap(LeafNodeProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.keys_.InternalSwap(&other->_impl_.keys_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LeafNodeProto, _impl_.next_page_id_)
      + sizeof(LeafNodeProto::_impl_.next_page_id_)
      - PROTOBUF_FIELD_OFFSET(LeafNodeProto, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LeafNodeProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bptree_5fnode_2eproto_getter, &descriptor_table_bptree_5fnode_2eproto_once,
      file_level_metadata_bptree_5fnode_2eproto[1]);
}

// ===================================================================

class InternalNodeProto::_Internal {
 public:
  static const ::bptree::HeaderProto& header(const InternalNodeProto* msg);
};

const ::bptree::HeaderProto&
InternalNodeProto::_Internal::header(const InternalNodeProto* msg) {
  return *msg->_impl_.header_;
}
InternalNodeProto::InternalNodeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bptree.InternalNodeProto)
}
InternalNodeProto::InternalNodeProto(const InternalNodeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InternalNodeProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){from._impl_.keys_}
    , /*decltype(_impl_._keys_cached_byte_size_)*/{0}
    , decltype(_impl_.children_){from._impl_.children_}
    , /*decltype(_impl_._children_cached_byte_size_)*/{0}
    , decltype(_impl_.header_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::bptree::HeaderProto(*from._impl_.header_);
  }
  // @@protoc_insertion_point(copy_constructor:bptree.InternalNodeProto)
}

inline void InternalNodeProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){arena}
    , /*decltype(_impl_._keys_cached_byte_size_)*/{0}
    , decltype(_impl_.children_){arena}
    , /*decltype(_impl_._children_cached_byte_size_)*/{0}
    , decltype(_impl_.header_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

InternalNodeProto::~InternalNodeProto() {
  // @@protoc_insertion_point(destructor:bptree.InternalNodeProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InternalNodeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keys_.~RepeatedField();
  _impl_.children_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void InternalNodeProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InternalNodeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:bptree.InternalNodeProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.keys_.Clear();
  _impl_.children_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InternalNodeProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bptree.HeaderProto header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 keys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_keys(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_keys(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 children = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_children(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_children(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InternalNodeProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bptree.InternalNodeProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bptree.HeaderProto header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // repeated int32 keys = 2;
  {
    int byte_size = _impl_._keys_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_keys(), byte_size, target);
    }
  }

  // repeated int32 children = 3;
  {
    int byte_size = _impl_._children_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_children(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bptree.InternalNodeProto)
  return target;
}

size_t InternalNodeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bptree.InternalNodeProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 keys = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.keys_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._keys_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 children = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.children_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._children_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .bptree.HeaderProto header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InternalNodeProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InternalNodeProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InternalNodeProto::GetClassData() const { return &_class_data_; }


void InternalNodeProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InternalNodeProto*>(&to_msg);
  auto& from = static_cast<const InternalNodeProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bptree.InternalNodeProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.keys_.MergeFrom(from._impl_.keys_);
  _this->_impl_.children_.MergeFrom(from._impl_.children_);
  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::bptree::HeaderProto::MergeFrom(
        from._internal_header());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InternalNodeProto::CopyFrom(const InternalNodeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bptree.InternalNodeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalNodeProto::IsInitialized() const {
  return true;
}

void InternalNodeProto::InternalSwap(InternalNodeProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.keys_.InternalSwap(&other->_impl_.keys_);
  _impl_.children_.InternalSwap(&other->_impl_.children_);
  swap(_impl_.header_, other->_impl_.header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InternalNodeProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bptree_5fnode_2eproto_getter, &descriptor_table_bptree_5fnode_2eproto_once,
      file_level_metadata_bptree_5fnode_2eproto[2]);
}

// ===================================================================

class PagePayloadProto::_Internal {
 public:
  static const ::bptree::LeafNodeProto& leaf_node(const PagePayloadProto* msg);
  static const ::bptree::InternalNodeProto& internal_node(const PagePayloadProto* msg);
};

const ::bptree::LeafNodeProto&
PagePayloadProto::_Internal::leaf_node(const PagePayloadProto* msg) {
  return *msg->_impl_.payload_.leaf_node_;
}
const ::bptree::InternalNodeProto&
PagePayloadProto::_Internal::internal_node(const PagePayloadProto* msg) {
  return *msg->_impl_.payload_.internal_node_;
}
void PagePayloadProto::set_allocated_leaf_node(::bptree::LeafNodeProto* leaf_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (leaf_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(leaf_node);
    if (message_arena != submessage_arena) {
      leaf_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leaf_node, submessage_arena);
    }
    set_has_leaf_node();
    _impl_.payload_.leaf_node_ = leaf_node;
  }
  // @@protoc_insertion_point(field_set_allocated:bptree.PagePayloadProto.leaf_node)
}
void PagePayloadProto::set_allocated_internal_node(::bptree::InternalNodeProto* internal_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (internal_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(internal_node);
    if (message_arena != submessage_arena) {
      internal_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, internal_node, submessage_arena);
    }
    set_has_internal_node();
    _impl_.payload_.internal_node_ = internal_node;
  }
  // @@protoc_insertion_point(field_set_allocated:bptree.PagePayloadProto.internal_node)
}
PagePayloadProto::PagePayloadProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bptree.PagePayloadProto)
}
PagePayloadProto::PagePayloadProto(const PagePayloadProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PagePayloadProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_payload();
  switch (from.payload_case()) {
    case kLeafNode: {
      _this->_internal_mutable_leaf_node()->::bptree::LeafNodeProto::MergeFrom(
          from._internal_leaf_node());
      break;
    }
    case kInternalNode: {
      _this->_internal_mutable_internal_node()->::bptree::InternalNodeProto::MergeFrom(
          from._internal_internal_node());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:bptree.PagePayloadProto)
}

inline void PagePayloadProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_payload();
}

PagePayloadProto::~PagePayloadProto() {
  // @@protoc_insertion_point(destructor:bptree.PagePayloadProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PagePayloadProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
}

void PagePayloadProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PagePayloadProto::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:bptree.PagePayloadProto)
  switch (payload_case()) {
    case kLeafNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.leaf_node_;
      }
      break;
    }
    case kInternalNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.internal_node_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}


void PagePayloadProto::Clear() {
// @@protoc_insertion_point(message_clear_start:bptree.PagePayloadProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PagePayloadProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bptree.LeafNodeProto leaf_node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_leaf_node(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bptree.InternalNodeProto internal_node = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_internal_node(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PagePayloadProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bptree.PagePayloadProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bptree.LeafNodeProto leaf_node = 1;
  if (_internal_has_leaf_node()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::leaf_node(this),
        _Internal::leaf_node(this).GetCachedSize(), target, stream);
  }

  // .bptree.InternalNodeProto internal_node = 2;
  if (_internal_has_internal_node()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::internal_node(this),
        _Internal::internal_node(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bptree.PagePayloadProto)
  return target;
}

size_t PagePayloadProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bptree.PagePayloadProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (payload_case()) {
    // .bptree.LeafNodeProto leaf_node = 1;
    case kLeafNode: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.leaf_node_);
      break;
    }
    // .bptree.InternalNodeProto internal_node = 2;
    case kInternalNode: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.internal_node_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PagePayloadProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PagePayloadProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PagePayloadProto::GetClassData() const { return &_class_data_; }


void PagePayloadProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PagePayloadProto*>(&to_msg);
  auto& from = static_cast<const PagePayloadProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bptree.PagePayloadProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.payload_case()) {
    case kLeafNode: {
      _this->_internal_mutable_leaf_node()->::bptree::LeafNodeProto::MergeFrom(
          from._internal_leaf_node());
      break;
    }
    case kInternalNode: {
      _this->_internal_mutable_internal_node()->::bptree::InternalNodeProto::MergeFrom(
          from._internal_internal_node());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PagePayloadProto::CopyFrom(const PagePayloadProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bptree.PagePayloadProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PagePayloadProto::IsInitialized() const {
  return true;
}

void PagePayloadProto::InternalSwap(PagePayloadProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PagePayloadProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bptree_5fnode_2eproto_getter, &descriptor_table_bptree_5fnode_2eproto_once,
      file_level_metadata_bptree_5fnode_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace bptree
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bptree::HeaderProto*
Arena::CreateMaybeMessage< ::bptree::HeaderProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bptree::HeaderProto >(arena);
}
template<> PROTOBUF_NOINLINE ::bptree::LeafNodeProto*
Arena::CreateMaybeMessage< ::bptree::LeafNodeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bptree::LeafNodeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::bptree::InternalNodeProto*
Arena::CreateMaybeMessage< ::bptree::InternalNodeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bptree::InternalNodeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::bptree::PagePayloadProto*
Arena::CreateMaybeMessage< ::bptree::PagePayloadProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bptree::PagePayloadProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
